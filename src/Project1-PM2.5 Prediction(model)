{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Project1-PM2.5 Prediction(model)","provenance":[],"collapsed_sections":[],"toc_visible":true,"machine_shape":"hm","authorship_tag":"ABX9TyPi1E5TkxbP0LYgp0D3yD3A"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"-E3vlQ8uXjCe","executionInfo":{"status":"ok","timestamp":1620922314981,"user_tz":-420,"elapsed":1171,"user":{"displayName":"Kueakun Liwcharoenchai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2WLntUrWC2oFxdRBMa0sX3Vd3dqZ8cmd7Hkyy=s64","userId":"08268236654700725410"}}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import statsmodels.api as sm\n","from pandas import DataFrame , concat\n","from sklearn.metrics import mean_absolute_error , mean_squared_error\n","%matplotlib inline\n","%config InlineBackend.figure_format = 'retina'\n","from numpy import mean , concatenate\n","from math import sqrt\n","from pandas import read_csv\n","from sklearn.preprocessing import MinMaxScaler\n","from tensorflow.keras.models import Sequential, model_from_json\n","from tensorflow.keras.layers import Dense,LSTM,Activation,Dropout,TimeDistributed,Flatten, Bidirectional, Reshape\n","from numpy import array , hstack\n","from tensorflow import keras\n","import tensorflow as tf\n","\n","from sklearn.externals import joblib"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"gv_dpLB8YEIJ"},"source":["tf.random.set_seed(2021)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GYY_SmSkYFNT","executionInfo":{"status":"ok","timestamp":1620922337746,"user_tz":-420,"elapsed":20706,"user":{"displayName":"Kueakun Liwcharoenchai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2WLntUrWC2oFxdRBMa0sX3Vd3dqZ8cmd7Hkyy=s64","userId":"08268236654700725410"}},"outputId":"0a4f5724-371d-4e73-d52c-92c78d26054b"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":8,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"bLxdk1MsLZmn"},"source":["#Data import and first clean"]},{"cell_type":"code","metadata":{"id":"x-3MbEYrLMbM","executionInfo":{"status":"ok","timestamp":1620922350647,"user_tz":-420,"elapsed":1392,"user":{"displayName":"Kueakun Liwcharoenchai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2WLntUrWC2oFxdRBMa0sX3Vd3dqZ8cmd7Hkyy=s64","userId":"08268236654700725410"}}},"source":["#ex. path1 = 'Bangkok', path2 = 'Bangkok'\n","def get_data(path1,path2):\n","  wind_train = pd.read_csv('/content/drive/Shareddrives/DS/DS_kaggle_edited/'+path1+'/Train/3H_wind_'+path1+'.csv')\n","  temp_train = pd.read_csv('/content/drive/Shareddrives/DS/DS_kaggle_edited/'+path1+'/Train/3H_temperature_'+path1+'.csv')\n","  pm_train = pd.read_csv('/content/drive/Shareddrives/DS/DS_kaggle_edited/'+path1+'/Train/'+path2+'DT.csv')\n","\n","  wind_test = pd.read_csv('/content/drive/Shareddrives/DS/DS_kaggle_edited/'+path1+'/Test/3H_wind_'+path1+'.csv')\n","  temp_test = pd.read_csv('/content/drive/Shareddrives/DS/DS_kaggle_edited/'+path1+'/Test/3H_temperature_'+path1+'.csv')\n","  pm_test = pd.read_csv('/content/drive/Shareddrives/DS/DS_kaggle_edited/'+path1+'/Test/'+path1+'.csv')\n","\n","  #Train Data\n","  pm_train['date'] = pd.to_datetime(pm_train['datetime'])\n","  pm_train = pm_train.set_index('date')\n","  pm_train = pm_train[['PM2.5']]\n","  pm_train_dp = pm_train[~pm_train.index.duplicated(keep='first')]\n","  pm_train_dp = pm_train_dp.asfreq('H')\n","\n","  wind_train['date'] = pd.to_datetime(wind_train['datetime'])\n","  wind_train = wind_train.set_index('date')\n","  wind_train = wind_train[['Wind Speed(km/h)','WindDir']]\n","  wind_train_dp = wind_train[~wind_train.index.duplicated(keep='first')]\n","  wind_train_dp = wind_train_dp.asfreq('H')\n","  wind_train_dp['WindDir'] = wind_train_dp['WindDir'].replace(360.0,0.0)\n","\n","  temp_train['date'] = pd.to_datetime(temp_train['datetime'])\n","  temp_train = temp_train.set_index('date')\n","  temp_train = temp_train[['Temp(C)']]\n","  temp_train_dp = temp_train[~temp_train.index.duplicated(keep='first')]\n","  temp_train_dp = temp_train_dp.asfreq('H')\n","\n","  train_data = pm_train_dp\n","  train_data['Temp'] = temp_train_dp['Temp(C)']\n","  train_data['WindDir'] = wind_train_dp['WindDir']\n","  train_data['WindSpd'] = wind_train_dp['Wind Speed(km/h)']\n","  train_data.loc['2019-03-18 07:00:00'] = [np.NaN,np.NaN,np.NaN,np.NaN]\n","\n","  train_data = train_data.interpolate()\n","  train_data = train_data.fillna(method='bfill')\n","  train_data = train_data.asfreq('H')\n","\n","  #Test Data\n","  wind_test['date'] = pd.to_datetime(wind_test['datetime'])\n","  wind_test = wind_test.set_index('date')\n","  wind_test = wind_test[['Wind Speed(km/h)','WindDir']]\n","  wind_test_dp = wind_test[~wind_test.index.duplicated(keep='first')]\n","  wind_test_dp = wind_test_dp.asfreq('H')\n","  wind_test_dp['WindDir'] = wind_test_dp['WindDir'].replace(360.0,0.0)\n","\n","  temp_test['date'] = pd.to_datetime(temp_test['datetime'])\n","  temp_test = temp_test.set_index('date')\n","  temp_test = temp_test[['Temp(C)']]\n","  temp_test_dp = temp_test[~temp_test.index.duplicated(keep='first')]\n","  temp_test_dp = temp_test_dp.asfreq('H')\n","\n","  pm_test = pm_test.rename(columns = {'Unnamed: 0': 'date','PM2.5(Âµg/m3)':'PM2.5'}, inplace = False)\n","  pm_test = pm_test.set_index('date')\n","  pm_test = pm_test.asfreq('H')\n","  pm_test_dp = pm_test.fillna(method='ffill')\n","\n","  test_data = pm_test_dp\n","  test_data['Temp'] = temp_test_dp['Temp(C)']\n","  test_data['WindDir'] = wind_test_dp['WindDir']\n","  test_data['WindSpd'] = wind_test_dp['Wind Speed(km/h)']\n","  test_data = test_data.interpolate()\n","  test_data = test_data.fillna(method='bfill')\n","\n","  all_data = pd.concat([train_data, test_data])\n","  all_data = all_data.asfreq('H')\n","  return train_data, test_data, all_data"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"O7OFsoFVMngl","executionInfo":{"status":"ok","timestamp":1620922385342,"user_tz":-420,"elapsed":33021,"user":{"displayName":"Kueakun Liwcharoenchai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2WLntUrWC2oFxdRBMa0sX3Vd3dqZ8cmd7Hkyy=s64","userId":"08268236654700725410"}}},"source":["chan_train, chan_test, chan_all = get_data('Chanthaburi', 'Chanthaburi')\n","cm_train, cm_test, cm_all = get_data('Chiang Mai','Chiang_Mai')\n","kan_train, kan_test, kan_all = get_data('Kanchanaburi','Kanchanaburi')\n","bkk_train, bkk_test, bkk_all = get_data('Bangkok','Bangkok')\n","kon_train, kon_test, kon_all = get_data('Khon Kaen','Khon_Kaen')\n","song_train, song_test, song_all = get_data('Songkhla','Songkhla')"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"olbfi8wYOsua"},"source":["merge dataframe"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":649},"id":"AMBul0kPRP0c","executionInfo":{"status":"ok","timestamp":1620834150410,"user_tz":-420,"elapsed":47437,"user":{"displayName":"Kueakun Liwcharoenchai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2WLntUrWC2oFxdRBMa0sX3Vd3dqZ8cmd7Hkyy=s64","userId":"08268236654700725410"}},"outputId":"d38a7c6d-1f3c-4790-896e-a900da4806b0"},"source":["all_df = pd.DataFrame()\n","all_df[['Temp_chan','WindDir_chan','WindSpd_chan']] = chan_all[['Temp','WindDir','WindSpd']]\n","all_df[['Temp_cm','WindDir_cm','WindSpd_cm']] = cm_all[['Temp','WindDir','WindSpd']]\n","all_df[['Temp_kan','WindDir_kan','WindSpd_kan']] = kan_all[['Temp','WindDir','WindSpd']]\n","all_df[['Temp_bkk','WindDir_bkk','WindSpd_bkk']] = bkk_all[['Temp','WindDir','WindSpd']]\n","all_df[['Temp_kon','WindDir_kon','WindSpd_kon']] = kon_all[['Temp','WindDir','WindSpd']]\n","all_df[['Temp_song','WindDir_song','WindSpd_song']] = song_all[['Temp','WindDir','WindSpd']]\n","all_df['PM2.5_chan'] =  chan_all['PM2.5']\n","all_df['PM2.5_cm'] =  cm_all['PM2.5']\n","all_df['PM2.5_kan'] =  kan_all['PM2.5']\n","all_df['PM2.5_bkk'] =  bkk_all['PM2.5']\n","all_df['PM2.5_kon'] =  kon_all['PM2.5']\n","all_df['PM2.5_song'] =  song_all['PM2.5']\n","all_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Temp_chan</th>\n","      <th>WindDir_chan</th>\n","      <th>WindSpd_chan</th>\n","      <th>Temp_cm</th>\n","      <th>WindDir_cm</th>\n","      <th>WindSpd_cm</th>\n","      <th>Temp_kan</th>\n","      <th>WindDir_kan</th>\n","      <th>WindSpd_kan</th>\n","      <th>Temp_bkk</th>\n","      <th>WindDir_bkk</th>\n","      <th>WindSpd_bkk</th>\n","      <th>Temp_kon</th>\n","      <th>WindDir_kon</th>\n","      <th>WindSpd_kon</th>\n","      <th>Temp_song</th>\n","      <th>WindDir_song</th>\n","      <th>WindSpd_song</th>\n","      <th>PM2.5_chan</th>\n","      <th>PM2.5_cm</th>\n","      <th>PM2.5_kan</th>\n","      <th>PM2.5_bkk</th>\n","      <th>PM2.5_kon</th>\n","      <th>PM2.5_song</th>\n","    </tr>\n","    <tr>\n","      <th>date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2016-03-03 15:00:00</th>\n","      <td>31.700000</td>\n","      <td>55.000000</td>\n","      <td>10.000000</td>\n","      <td>33.4</td>\n","      <td>230.000000</td>\n","      <td>5.000000</td>\n","      <td>36.700000</td>\n","      <td>85.000000</td>\n","      <td>10.000000</td>\n","      <td>34.600000</td>\n","      <td>60.000000</td>\n","      <td>12.000000</td>\n","      <td>33.000000</td>\n","      <td>80.0</td>\n","      <td>6.000000</td>\n","      <td>29.300000</td>\n","      <td>95.000000</td>\n","      <td>31.000000</td>\n","      <td>44.2</td>\n","      <td>53.7</td>\n","      <td>65.2</td>\n","      <td>62.9</td>\n","      <td>35.800000</td>\n","      <td>31.2</td>\n","    </tr>\n","    <tr>\n","      <th>2016-03-03 16:00:00</th>\n","      <td>31.700000</td>\n","      <td>55.000000</td>\n","      <td>10.000000</td>\n","      <td>33.4</td>\n","      <td>230.000000</td>\n","      <td>5.000000</td>\n","      <td>36.700000</td>\n","      <td>85.000000</td>\n","      <td>10.000000</td>\n","      <td>34.600000</td>\n","      <td>60.000000</td>\n","      <td>12.000000</td>\n","      <td>33.000000</td>\n","      <td>80.0</td>\n","      <td>6.000000</td>\n","      <td>29.300000</td>\n","      <td>95.000000</td>\n","      <td>31.000000</td>\n","      <td>44.2</td>\n","      <td>53.7</td>\n","      <td>65.2</td>\n","      <td>62.9</td>\n","      <td>35.800000</td>\n","      <td>31.2</td>\n","    </tr>\n","    <tr>\n","      <th>2016-03-03 17:00:00</th>\n","      <td>30.200000</td>\n","      <td>58.333333</td>\n","      <td>12.333333</td>\n","      <td>30.4</td>\n","      <td>226.666667</td>\n","      <td>6.666667</td>\n","      <td>35.066667</td>\n","      <td>90.000000</td>\n","      <td>11.000000</td>\n","      <td>32.766667</td>\n","      <td>63.333333</td>\n","      <td>11.666667</td>\n","      <td>31.366667</td>\n","      <td>95.0</td>\n","      <td>6.666667</td>\n","      <td>28.433333</td>\n","      <td>91.666667</td>\n","      <td>30.333333</td>\n","      <td>44.3</td>\n","      <td>53.7</td>\n","      <td>64.9</td>\n","      <td>55.5</td>\n","      <td>36.000000</td>\n","      <td>31.2</td>\n","    </tr>\n","    <tr>\n","      <th>2016-03-03 18:00:00</th>\n","      <td>28.700000</td>\n","      <td>61.666667</td>\n","      <td>14.666667</td>\n","      <td>27.4</td>\n","      <td>223.333333</td>\n","      <td>8.333333</td>\n","      <td>33.433333</td>\n","      <td>95.000000</td>\n","      <td>12.000000</td>\n","      <td>30.933333</td>\n","      <td>66.666667</td>\n","      <td>11.333333</td>\n","      <td>29.733333</td>\n","      <td>110.0</td>\n","      <td>7.333333</td>\n","      <td>27.566667</td>\n","      <td>88.333333</td>\n","      <td>29.666667</td>\n","      <td>44.2</td>\n","      <td>53.7</td>\n","      <td>64.9</td>\n","      <td>55.5</td>\n","      <td>35.900000</td>\n","      <td>31.2</td>\n","    </tr>\n","    <tr>\n","      <th>2016-03-03 19:00:00</th>\n","      <td>27.200000</td>\n","      <td>65.000000</td>\n","      <td>17.000000</td>\n","      <td>24.4</td>\n","      <td>220.000000</td>\n","      <td>10.000000</td>\n","      <td>31.800000</td>\n","      <td>100.000000</td>\n","      <td>13.000000</td>\n","      <td>29.100000</td>\n","      <td>70.000000</td>\n","      <td>11.000000</td>\n","      <td>28.100000</td>\n","      <td>125.0</td>\n","      <td>8.000000</td>\n","      <td>26.700000</td>\n","      <td>85.000000</td>\n","      <td>29.000000</td>\n","      <td>34.2</td>\n","      <td>33.4</td>\n","      <td>38.4</td>\n","      <td>47.9</td>\n","      <td>38.033333</td>\n","      <td>24.5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2020-03-18 16:00:00</th>\n","      <td>29.400000</td>\n","      <td>90.000000</td>\n","      <td>8.000000</td>\n","      <td>38.9</td>\n","      <td>250.000000</td>\n","      <td>27.000000</td>\n","      <td>37.700000</td>\n","      <td>160.000000</td>\n","      <td>3.000000</td>\n","      <td>33.000000</td>\n","      <td>210.000000</td>\n","      <td>7.000000</td>\n","      <td>33.500000</td>\n","      <td>240.0</td>\n","      <td>13.000000</td>\n","      <td>29.600000</td>\n","      <td>100.000000</td>\n","      <td>31.000000</td>\n","      <td>19.4</td>\n","      <td>53.9</td>\n","      <td>40.9</td>\n","      <td>23.9</td>\n","      <td>48.300000</td>\n","      <td>11.3</td>\n","    </tr>\n","    <tr>\n","      <th>2020-03-18 17:00:00</th>\n","      <td>28.633333</td>\n","      <td>86.666667</td>\n","      <td>9.666667</td>\n","      <td>35.8</td>\n","      <td>250.000000</td>\n","      <td>25.666667</td>\n","      <td>35.600000</td>\n","      <td>166.666667</td>\n","      <td>7.666667</td>\n","      <td>32.133333</td>\n","      <td>226.666667</td>\n","      <td>6.666667</td>\n","      <td>33.166667</td>\n","      <td>240.0</td>\n","      <td>15.333333</td>\n","      <td>28.566667</td>\n","      <td>100.000000</td>\n","      <td>30.333333</td>\n","      <td>19.8</td>\n","      <td>46.5</td>\n","      <td>33.4</td>\n","      <td>24.4</td>\n","      <td>42.000000</td>\n","      <td>11.7</td>\n","    </tr>\n","    <tr>\n","      <th>2020-03-18 18:00:00</th>\n","      <td>27.866667</td>\n","      <td>83.333333</td>\n","      <td>11.333333</td>\n","      <td>32.7</td>\n","      <td>250.000000</td>\n","      <td>24.333333</td>\n","      <td>33.500000</td>\n","      <td>173.333333</td>\n","      <td>12.333333</td>\n","      <td>31.266667</td>\n","      <td>243.333333</td>\n","      <td>6.333333</td>\n","      <td>32.833333</td>\n","      <td>240.0</td>\n","      <td>17.666667</td>\n","      <td>27.533333</td>\n","      <td>100.000000</td>\n","      <td>29.666667</td>\n","      <td>22.9</td>\n","      <td>42.9</td>\n","      <td>28.4</td>\n","      <td>24.9</td>\n","      <td>42.700000</td>\n","      <td>11.7</td>\n","    </tr>\n","    <tr>\n","      <th>2020-03-18 19:00:00</th>\n","      <td>27.100000</td>\n","      <td>80.000000</td>\n","      <td>13.000000</td>\n","      <td>29.6</td>\n","      <td>250.000000</td>\n","      <td>23.000000</td>\n","      <td>31.400000</td>\n","      <td>180.000000</td>\n","      <td>17.000000</td>\n","      <td>30.400000</td>\n","      <td>260.000000</td>\n","      <td>6.000000</td>\n","      <td>32.500000</td>\n","      <td>240.0</td>\n","      <td>20.000000</td>\n","      <td>26.500000</td>\n","      <td>100.000000</td>\n","      <td>29.000000</td>\n","      <td>27.2</td>\n","      <td>30.8</td>\n","      <td>31.5</td>\n","      <td>27.0</td>\n","      <td>46.500000</td>\n","      <td>10.9</td>\n","    </tr>\n","    <tr>\n","      <th>2020-03-18 20:00:00</th>\n","      <td>27.100000</td>\n","      <td>80.000000</td>\n","      <td>13.000000</td>\n","      <td>29.6</td>\n","      <td>250.000000</td>\n","      <td>23.000000</td>\n","      <td>31.400000</td>\n","      <td>180.000000</td>\n","      <td>17.000000</td>\n","      <td>30.400000</td>\n","      <td>260.000000</td>\n","      <td>6.000000</td>\n","      <td>32.500000</td>\n","      <td>240.0</td>\n","      <td>20.000000</td>\n","      <td>26.500000</td>\n","      <td>100.000000</td>\n","      <td>29.000000</td>\n","      <td>28.2</td>\n","      <td>31.5</td>\n","      <td>24.1</td>\n","      <td>26.1</td>\n","      <td>51.200000</td>\n","      <td>12.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>35430 rows Ã 24 columns</p>\n","</div>"],"text/plain":["                     Temp_chan  WindDir_chan  ...  PM2.5_kon  PM2.5_song\n","date                                          ...                       \n","2016-03-03 15:00:00  31.700000     55.000000  ...  35.800000        31.2\n","2016-03-03 16:00:00  31.700000     55.000000  ...  35.800000        31.2\n","2016-03-03 17:00:00  30.200000     58.333333  ...  36.000000        31.2\n","2016-03-03 18:00:00  28.700000     61.666667  ...  35.900000        31.2\n","2016-03-03 19:00:00  27.200000     65.000000  ...  38.033333        24.5\n","...                        ...           ...  ...        ...         ...\n","2020-03-18 16:00:00  29.400000     90.000000  ...  48.300000        11.3\n","2020-03-18 17:00:00  28.633333     86.666667  ...  42.000000        11.7\n","2020-03-18 18:00:00  27.866667     83.333333  ...  42.700000        11.7\n","2020-03-18 19:00:00  27.100000     80.000000  ...  46.500000        10.9\n","2020-03-18 20:00:00  27.100000     80.000000  ...  51.200000        12.0\n","\n","[35430 rows x 24 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"jao0PlBmJwh4"},"source":["all_train_df = all_df.loc[:'2019-03-18 07:00:00']\n","all_test_df = all_df.loc['2019-03-18 07:00:00':]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JUt9y6cAZw_F"},"source":["len_train = len(chan_train)\n","len_test  = len(chan_test)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SAX9N87eYf1E"},"source":["# Normalize"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NdeDS2RxYhge","executionInfo":{"status":"ok","timestamp":1620834150413,"user_tz":-420,"elapsed":45334,"user":{"displayName":"Kueakun Liwcharoenchai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2WLntUrWC2oFxdRBMa0sX3Vd3dqZ8cmd7Hkyy=s64","userId":"08268236654700725410"}},"outputId":"54fd3595-053e-4979-ffbf-5611a881c89c"},"source":["scaler = [MinMaxScaler() for i in range(24)]\n","\n","all_scaled_df_val = all_df.copy(True)\n","all_scaled_df_val = all_scaled_df_val.values\n","\n","for i in range(24):\n","  all_scaled_df_val[:,[i]] = scaler[i].fit_transform(all_scaled_df_val[:,[i]])\n","all_scaled_df_val = np.asarray(all_scaled_df_val).astype(np.float32)\n","all_scaled_df_val"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.82978725, 0.15492958, 0.12195122, ..., 0.54506063, 0.04543724,\n","        0.34705228],\n","       [0.82978725, 0.15492958, 0.12195122, ..., 0.54506063, 0.04543724,\n","        0.34705228],\n","       [0.75      , 0.16431925, 0.15040651, ..., 0.48093587, 0.04569108,\n","        0.34705228],\n","       ...,\n","       [0.6258865 , 0.23474178, 0.13821138, ..., 0.21577123, 0.0541947 ,\n","        0.13014461],\n","       [0.5851064 , 0.22535211, 0.15853658, ..., 0.23396881, 0.05901764,\n","        0.12124583],\n","       [0.5851064 , 0.22535211, 0.15853658, ..., 0.22616984, 0.06498287,\n","        0.13348165]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"cYvEOP_TlAhZ"},"source":["Export scaler"]},{"cell_type":"markdown","metadata":{"id":"lFZqhGWYTcx4"},"source":["*à¸£à¸±à¸à¹à¸¡à¸·à¹à¸­à¸à¹à¸­à¸à¸à¸²à¸£à¹à¸à¸à¹à¸¡à¹à¸à¸¥à¹à¸«à¸¡à¹à¹à¸à¹à¸²à¸à¸±à¹à¸"]},{"cell_type":"code","metadata":{"id":"pAXXYbV7k_Pc"},"source":["# scaler_path = '/content/drive/Shareddrives/DS/Model Export/scaler_'\n","\n","# for i in range(24):\n","#   joblib.dump(scaler[i], scaler_path+str(i)+'.save')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VCYIYJHuadus"},"source":["#Split Train X/Y"]},{"cell_type":"markdown","metadata":{"id":"1rybggsV6TJb"},"source":["X [t-23,t-22,...,t]  \n","y [t+1, t+2, ... t+72]"]},{"cell_type":"code","metadata":{"id":"WgrD5hCEa8e5"},"source":["n_steps_in, n_steps_out, n_features = 24 , 72 , 24"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BOhquEJogjGo"},"source":["def split_sequences(sequences, n_steps, n_steps_out):\n","  X, y = [], []\n","  for i in range(len(sequences)):\n","    # find the end of this pattern\n","    end_ix = i + n_steps\n","    # check if we are beyond the dataset\n","    if end_ix+n_steps_out > len(sequences):\n","      break\n","    # gather input and output parts of the pattern\n","    seq_x, seq_y = sequences[i:end_ix, :], sequences[end_ix:end_ix+n_steps_out, -6:]\n","    X.append(seq_x)\n","    y.append(seq_y)\n","    #y.append(seq_y)\n","  return np.array(X), np.array(y)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2Cu6uHrDZfkI"},"source":["scaled_train = all_scaled_df_val[:len_train,]\n","scaled_test = all_scaled_df_val[len_train - n_steps_in:,]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VqVDNWILbBgM"},"source":["train_X, train_y = split_sequences(scaled_train, n_steps_in, n_steps_out)#, n_steps_out)\n","test_X, test_y = split_sequences(scaled_test, n_steps_in, n_steps_out)# n_steps_out)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9_iv95CLbZdY","executionInfo":{"status":"ok","timestamp":1620834170982,"user_tz":-420,"elapsed":1954,"user":{"displayName":"Kueakun Liwcharoenchai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2WLntUrWC2oFxdRBMa0sX3Vd3dqZ8cmd7Hkyy=s64","userId":"08268236654700725410"}},"outputId":"a554ac7e-403c-40c9-ecc0-88ec3af58360"},"source":["print(train_X.shape)\n","print(train_y.shape)\n","print(test_X.shape)\n","print(test_y.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(26538, 24, 24)\n","(26538, 72, 6)\n","(8726, 24, 24)\n","(8726, 72, 6)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"D-QsOaO0bf2z"},"source":["# Model pls"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pjg-DxbKtEr4","executionInfo":{"status":"ok","timestamp":1620676023056,"user_tz":-420,"elapsed":787,"user":{"displayName":"Kueakun Liwcharoenchai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2WLntUrWC2oFxdRBMa0sX3Vd3dqZ8cmd7Hkyy=s64","userId":"08268236654700725410"}},"outputId":"3de7fcb3-e3f3-46c0-fb00-eba773e5e6c5"},"source":["#72*6 / 24"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["18.0"]},"metadata":{"tags":[]},"execution_count":289}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GUtZIIeIOrYC","executionInfo":{"status":"ok","timestamp":1620834177290,"user_tz":-420,"elapsed":4883,"user":{"displayName":"Kueakun Liwcharoenchai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2WLntUrWC2oFxdRBMa0sX3Vd3dqZ8cmd7Hkyy=s64","userId":"08268236654700725410"}},"outputId":"d33de392-c428-4421-e9fb-e1a6f341ae2b"},"source":["model = Sequential()\n","model.add(Bidirectional(LSTM(100, return_sequences=True), input_shape=(n_steps_in, n_features)))\n","model.add(Dense(50))\n","model.add(Dense(18))\n","model.add(Reshape((72,6),input_shape=(n_steps_in,18)))\n","model.add(TimeDistributed(Dense(6)))\n","model.compile(loss=\"mse\", optimizer=\"adam\")\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","bidirectional (Bidirectional (None, 24, 200)           100000    \n","_________________________________________________________________\n","dense (Dense)                (None, 24, 50)            10050     \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 24, 18)            918       \n","_________________________________________________________________\n","reshape (Reshape)            (None, 72, 6)             0         \n","_________________________________________________________________\n","time_distributed (TimeDistri (None, 72, 6)             42        \n","=================================================================\n","Total params: 111,010\n","Trainable params: 111,010\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S5Avu4tictPv","executionInfo":{"status":"ok","timestamp":1620834349815,"user_tz":-420,"elapsed":170895,"user":{"displayName":"Kueakun Liwcharoenchai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2WLntUrWC2oFxdRBMa0sX3Vd3dqZ8cmd7Hkyy=s64","userId":"08268236654700725410"}},"outputId":"9f79bf43-4b7a-4b4b-8aaf-fb07ae83b498"},"source":["history = model.fit(train_X, train_y, epochs=30, batch_size=32, validation_split=0.2, shuffle=True)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/30\n","664/664 [==============================] - 24s 9ms/step - loss: 0.0096 - val_loss: 0.0054\n","Epoch 2/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0037 - val_loss: 0.0054\n","Epoch 3/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0035 - val_loss: 0.0050\n","Epoch 4/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0033 - val_loss: 0.0052\n","Epoch 5/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0032 - val_loss: 0.0052\n","Epoch 6/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0031 - val_loss: 0.0053\n","Epoch 7/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0029 - val_loss: 0.0054\n","Epoch 8/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0029 - val_loss: 0.0053\n","Epoch 9/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0028 - val_loss: 0.0054\n","Epoch 10/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0027 - val_loss: 0.0053\n","Epoch 11/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0026 - val_loss: 0.0057\n","Epoch 12/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0025 - val_loss: 0.0056\n","Epoch 13/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0024 - val_loss: 0.0059\n","Epoch 14/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0024 - val_loss: 0.0055\n","Epoch 15/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0023 - val_loss: 0.0056\n","Epoch 16/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0022 - val_loss: 0.0056\n","Epoch 17/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0021 - val_loss: 0.0057\n","Epoch 18/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0021 - val_loss: 0.0057\n","Epoch 19/30\n","664/664 [==============================] - 5s 7ms/step - loss: 0.0020 - val_loss: 0.0058\n","Epoch 20/30\n","664/664 [==============================] - 5s 7ms/step - loss: 0.0019 - val_loss: 0.0057\n","Epoch 21/30\n","664/664 [==============================] - 5s 7ms/step - loss: 0.0019 - val_loss: 0.0055\n","Epoch 22/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0019 - val_loss: 0.0056\n","Epoch 23/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0018 - val_loss: 0.0058\n","Epoch 24/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0018 - val_loss: 0.0056\n","Epoch 25/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0018 - val_loss: 0.0057\n","Epoch 26/30\n","664/664 [==============================] - 5s 7ms/step - loss: 0.0017 - val_loss: 0.0056\n","Epoch 27/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0017 - val_loss: 0.0059\n","Epoch 28/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0016 - val_loss: 0.0058\n","Epoch 29/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0016 - val_loss: 0.0059\n","Epoch 30/30\n","664/664 [==============================] - 5s 8ms/step - loss: 0.0016 - val_loss: 0.0058\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"JHRY8vIzPvQc","executionInfo":{"status":"ok","timestamp":1620834451462,"user_tz":-420,"elapsed":1631,"user":{"displayName":"Kueakun Liwcharoenchai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2WLntUrWC2oFxdRBMa0sX3Vd3dqZ8cmd7Hkyy=s64","userId":"08268236654700725410"}},"outputId":"16e1eb5a-8eab-4ca0-abb3-7a9e42d111bf"},"source":["plt.plot(history.history['loss'])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f384e6fcb90>]"]},"metadata":{"tags":[]},"execution_count":23},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"image/png":{"width":393,"height":248},"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"0Mb6LuAApw6i"},"source":["Export lstm model"]},{"cell_type":"markdown","metadata":{"id":"hGGuOx5WTnfR"},"source":["*à¸£à¸±à¸à¹à¸¡à¸·à¹à¸­à¸à¹à¸­à¸à¸à¸²à¸£à¹à¸à¸à¹à¸¡à¹à¸à¸¥à¹à¸«à¸¡à¹à¹à¸à¹à¸²à¸à¸±à¹à¸"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NSbihP95po3p","executionInfo":{"status":"ok","timestamp":1620733426093,"user_tz":-420,"elapsed":808,"user":{"displayName":"Kueakun Liwcharoenchai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2WLntUrWC2oFxdRBMa0sX3Vd3dqZ8cmd7Hkyy=s64","userId":"08268236654700725410"}},"outputId":"30901993-c68c-4530-fb3a-7b4ea2d2d395"},"source":["# model_path = '/content/drive/Shareddrives/DS/Model Export/'\n","\n","# model_json = model.to_json()\n","# with open(model_path+\"model.json\", \"w\") as json_file:\n","#     json_file.write(model_json)\n","# # serialize weights to HDF5\n","# model.save_weights(model_path+\"model.h5\")\n","# print(\"Saved model to disk\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Saved model to disk\n"],"name":"stdout"}]}]}